/*
 * WebServicePanel.java
 *
 * Created on 06 October 2005, 12:08
 */

package org.owasp.webscarab.plugin.webservice.swing;

import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.util.Iterator;
import java.util.List;
import java.util.logging.Logger;
import javax.swing.Action;
import javax.swing.JOptionPane;
import javax.swing.event.ListDataEvent;
import javax.swing.event.ListDataListener;
import javax.wsdl.Definition;
import javax.wsdl.WSDLException;
import org.owasp.webscarab.model.ConversationID;
import org.owasp.webscarab.model.ConversationModel;
import org.owasp.webscarab.model.Preferences;
import org.owasp.webscarab.model.Response;
import org.owasp.webscarab.plugin.webservice.OperationInfo;
import org.owasp.webscarab.plugin.webservice.ServiceInfo;
import org.owasp.webscarab.plugin.webservice.Value;
import org.owasp.webscarab.plugin.webservice.WebService;
import org.owasp.webscarab.plugin.webservice.WebServiceListener;
import org.owasp.webscarab.plugin.webservice.WebServiceModel;
import org.owasp.webscarab.ui.swing.ConversationListModel;
import org.owasp.webscarab.ui.swing.ConversationRenderer;
import org.owasp.webscarab.ui.swing.HeaderPanel;
import org.owasp.webscarab.ui.swing.ResponsePanel;
import org.owasp.webscarab.ui.swing.SwingPluginUI;
import org.owasp.webscarab.util.swing.ColumnDataModel;
import org.owasp.webscarab.util.swing.JTreeTable;
import org.owasp.webscarab.util.swing.ListComboBoxModel;
import org.owasp.webscarab.util.swing.SwingWorker;
import org.owasp.webscarab.util.swing.TreeUtil;
import org.owasp.webscarab.util.swing.treetable.DefaultTreeTableModel;

/**
 *
 * @author  rdawes
 */
public class WebServicePanel extends javax.swing.JPanel implements SwingPluginUI {
    
    private WebService _plugin;
    private WebServiceModel _model;
    private ResponsePanel _responsePanel;
    private JTreeTable _inputTreeTable;
    private MessageTreeTableModel _inputTreeTableModel = null;
    
    private HeaderPanel _hp;
    
    private Logger _logger = Logger.getLogger(getClass().toString());
    
    /** Creates new form WebServicePanel */
    public WebServicePanel(WebService plugin) {
        initComponents();
        
        _hp  = new HeaderPanel();
        _hp.setEditable(true);
        
        _responsePanel = new ResponsePanel();
        splitPane.setBottomComponent(_responsePanel);
        _plugin = plugin;
        _model = plugin.getModel();
        _model.addModelListener(new Listener());
        ConversationModel wsdlModel = _model.getWSDLConversations();
        wsdlComboBox.setModel(new ListComboBoxModel(new ConversationListModel(wsdlModel)));
        wsdlComboBox.setRenderer(new ConversationRenderer(wsdlModel));
        _inputTreeTable = new JTreeTable(new MessageTreeTableModel());
        requestScrollPane.setViewportView(_inputTreeTable);
        String dividerLocation = Preferences.getPreference("WebService.dividerLocation");
        if (dividerLocation != null) {
            try {
                splitPane.setDividerLocation(Integer.parseInt(dividerLocation));
            } catch (NumberFormatException nfe) {}
        }
        splitPane.addPropertyChangeListener(new PropertyChangeListener() {
            public void propertyChange(PropertyChangeEvent e) {
                if (e.getPropertyName().equals("dividerLocation")) {
                    Preferences.setPreference("WebService.dividerLocation", e.getNewValue().toString());
                }
            }
        });
        wsdlComboBox.getModel().addListDataListener(new ListDataListener() {
            public void intervalRemoved(ListDataEvent evt) {}
            public void intervalAdded(ListDataEvent evt) {
                if (wsdlComboBox.getSelectedIndex() == -1 && wsdlComboBox.getModel().getSize() > 0) {
                    wsdlComboBox.setSelectedIndex(evt.getIndex1());
                }
            }
            public void contentsChanged(ListDataEvent evt) {}
        });
    }
    
    public Action[] getConversationActions() {
        return null;
    }
    
    public ColumnDataModel[] getConversationColumns() {
        return null;
    }
    
    public javax.swing.JPanel getPanel() {
        return this;
    }
    
    public String getPluginName() {
        return _plugin.getPluginName();
    }
    
    public Action[] getUrlActions() {
        return null;
    }
    
    public ColumnDataModel[] getUrlColumns() {
        return null;
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        loadButton = new javax.swing.JButton();
        wsdlComboBox = new javax.swing.JComboBox();
        operationComboBox = new javax.swing.JComboBox();
        serviceComboBox = new javax.swing.JComboBox();
        urlTextField = new javax.swing.JTextField();
        splitPane = new javax.swing.JSplitPane();
        requestScrollPane = new javax.swing.JScrollPane();
        jPanel2 = new javax.swing.JPanel();
        headerButton = new javax.swing.JButton();
        executeButton = new javax.swing.JButton();

        setLayout(new java.awt.BorderLayout());

        jPanel1.setLayout(new java.awt.GridBagLayout());

        jLabel1.setText("WSDL : ");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        jPanel1.add(jLabel1, gridBagConstraints);

        jLabel2.setText("WSDL URL : ");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        jPanel1.add(jLabel2, gridBagConstraints);

        jLabel3.setText("Service : ");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        jPanel1.add(jLabel3, gridBagConstraints);

        jLabel4.setText("Operation : ");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        jPanel1.add(jLabel4, gridBagConstraints);

        loadButton.setText("Load");
        loadButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadButtonActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        jPanel1.add(loadButton, gridBagConstraints);

        wsdlComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                wsdlComboBoxActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        jPanel1.add(wsdlComboBox, gridBagConstraints);

        operationComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                operationComboBoxActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        jPanel1.add(operationComboBox, gridBagConstraints);

        serviceComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                serviceComboBoxActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        jPanel1.add(serviceComboBox, gridBagConstraints);

        urlTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                urlTextFieldActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        jPanel1.add(urlTextField, gridBagConstraints);

        add(jPanel1, java.awt.BorderLayout.NORTH);

        splitPane.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);
        splitPane.setResizeWeight(0.5);
        splitPane.setLeftComponent(requestScrollPane);

        add(splitPane, java.awt.BorderLayout.CENTER);

        headerButton.setText("Headers");
        headerButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                headerButtonActionPerformed(evt);
            }
        });

        jPanel2.add(headerButton);

        executeButton.setText("Execute");
        executeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                executeButtonActionPerformed(evt);
            }
        });

        jPanel2.add(executeButton);

        add(jPanel2, java.awt.BorderLayout.SOUTH);

    }
    // </editor-fold>//GEN-END:initComponents

    private void headerButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_headerButtonActionPerformed
        _hp.setHeaders(_model.getExtraHeaders());
        JOptionPane.showMessageDialog(this, _hp, "Spider Extra Headers", JOptionPane.PLAIN_MESSAGE);
        _model.setExtraHeaders(_hp.getHeaders());
    }//GEN-LAST:event_headerButtonActionPerformed
    
    private void executeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_executeButtonActionPerformed
        if (_inputTreeTable.isEditing())
            _inputTreeTable.getCellEditor().stopCellEditing();
        _responsePanel.setResponse(null);
        executeButton.setEnabled(false);
        final OperationInfo operInfo = (OperationInfo) operationComboBox.getSelectedItem();
        if (operInfo != null) {
            new SwingWorker() {
                public Object construct() {
                    try {
                        return _plugin.invokeOperation(operInfo, _inputTreeTableModel.getValues());
                    } catch (Exception e) {
                        return e;
                    }
                }
                
                //Runs on the event-dispatching thread.
                public void finished() {
                    Object obj = getValue();
                    if (obj != null && obj instanceof Response) {
                        Response response = (Response) obj;
                        _responsePanel.setResponse(response);
                    } else {
                        JOptionPane.showMessageDialog(null, new String[] {"Error fetching response: ", obj.toString()}, "Error", JOptionPane.ERROR_MESSAGE);
                        _logger.severe("Exception fetching response: " + obj);
                    }
                    executeButton.setEnabled(true);
                }
            }.start();
        }
    }//GEN-LAST:event_executeButtonActionPerformed
    
    private void operationComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_operationComboBoxActionPerformed
        OperationInfo operInfo = (OperationInfo) operationComboBox.getSelectedItem();
        _responsePanel.setResponse(null);
        if (operInfo != null) {
            Value[] values = _plugin.buildValues(operInfo, operInfo.getInputMessage());
            _inputTreeTableModel = new MessageTreeTableModel(_model.getSchema(), operInfo.getInputMessage(), values);
            _inputTreeTable.setModel(_inputTreeTableModel);
            _inputTreeTable.getTree().setCellRenderer(new MessageTreeRenderer());
            TreeUtil.expandAll(_inputTreeTable.getTree(), true);
        }
    }//GEN-LAST:event_operationComboBoxActionPerformed
    
    private void serviceComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_serviceComboBoxActionPerformed
        operationComboBox.removeAllItems();
        ServiceInfo serviceInfo = (ServiceInfo) serviceComboBox.getSelectedItem();
        if (serviceInfo != null) {
            Iterator operations = serviceInfo.getOperations();
            while (operations.hasNext()) {
                operationComboBox.addItem(operations.next());
            }
        }
    }//GEN-LAST:event_serviceComboBoxActionPerformed
    
    private void loadButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadButtonActionPerformed
        loadButton.setEnabled(false);
        new SwingWorker() {
            public Object construct() {
                try {
                    Definition definition = _plugin.getWSDL(urlTextField.getText());
                    _plugin.selectWSDL(definition);
                    return null;
                } catch (Exception e) {
                    return e;
                }
            }
            
            //Runs on the event-dispatching thread.
            public void finished() {
                Object obj = getValue();
                if (obj != null && obj instanceof Exception) {
                    JOptionPane.showMessageDialog(null, new String[] {"Error fetching WSDL: ", obj.toString()}, "Error", JOptionPane.ERROR_MESSAGE);
                    _logger.severe("Exception fetching WSDL: " + obj);
                }
                loadButton.setEnabled(true);
            }
        }.start();
    }//GEN-LAST:event_loadButtonActionPerformed
    
    private void urlTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_urlTextFieldActionPerformed
        loadButton.doClick();
    }//GEN-LAST:event_urlTextFieldActionPerformed
    
    private void wsdlComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_wsdlComboBoxActionPerformed
        ConversationID id = (ConversationID) wsdlComboBox.getSelectedItem();
        if (id != null) {
            try {
                _plugin.selectWSDL(_plugin.getDefinition(id));
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, new String[] {"Error parsing WSDL : ", e.toString()}, "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_wsdlComboBoxActionPerformed
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton executeButton;
    private javax.swing.JButton headerButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JButton loadButton;
    private javax.swing.JComboBox operationComboBox;
    private javax.swing.JScrollPane requestScrollPane;
    private javax.swing.JComboBox serviceComboBox;
    private javax.swing.JSplitPane splitPane;
    private javax.swing.JTextField urlTextField;
    private javax.swing.JComboBox wsdlComboBox;
    // End of variables declaration//GEN-END:variables
    
    private class Listener implements WebServiceListener {
        
        public Listener() {
        }
        
        public void servicesChanged() {
            serviceComboBox.removeAllItems();
            operationComboBox.removeAllItems();
            int count = _model.getServiceCount();
            for (int i=0; i<count; i++) {
                serviceComboBox.addItem(_model.getServiceInfo(i));
            }
        }
    }
}
